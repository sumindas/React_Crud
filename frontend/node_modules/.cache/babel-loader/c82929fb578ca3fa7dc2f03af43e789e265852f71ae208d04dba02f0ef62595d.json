{"ast":null,"code":"import { createStore } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { SETUSER, LOGIN, LOGOUT, ADMINLOGIN, ADMINLOGOUT, ALLUSERS, UPDATEUSER } from './ActionType';\nconst persistConfig = {\n  key: 'root',\n  storage\n};\nconst initialState = {\n  // users: {},\n  user: null,\n  token: '',\n  // profile:'',\n  allUsers: [],\n  admintoken: ''\n};\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SETUSER:\n      return {\n        ...state,\n        users: action.users\n      };\n    case LOGIN:\n      return {\n        ...state,\n        token: action.token\n      };\n    case LOGOUT:\n      return {\n        ...state,\n        user: null\n      };\n    case ALLUSERS:\n      return {\n        ...state,\n        allUsers: action.data\n      };\n    case UPDATEUSER:\n      const updatedUser = action.data;\n      const updatedUsers = state.allUsers.map(user => {\n        if (user.id === updatedUser.id) {\n          return updatedUser;\n        } else {\n          return user;\n        }\n      });\n      return {\n        ...state,\n        allUsers: updatedUsers\n      };\n    case ADMINLOGIN:\n      return {\n        ...state,\n        admintoken: action.token\n      };\n    case ADMINLOGOUT:\n      return {\n        ...state,\n        admintoken: '',\n        allUsers: []\n      };\n    default:\n      return state;\n  }\n};\nconst persistedReducer = persistReducer(persistConfig, reducer);\nconst store = createStore(persistedReducer);\nconst persistor = persistStore(store);\nexport { store, persistor };","map":{"version":3,"names":["createStore","persistStore","persistReducer","storage","SETUSER","LOGIN","LOGOUT","ADMINLOGIN","ADMINLOGOUT","ALLUSERS","UPDATEUSER","persistConfig","key","initialState","user","token","allUsers","admintoken","reducer","state","action","type","users","data","updatedUser","updatedUsers","map","id","persistedReducer","store","persistor"],"sources":["D:/Sumindas/brocamp-sumin/React-Workouts/React_Crud/frontend/src/Redux/Reducer.js"],"sourcesContent":["import { createStore } from 'redux'\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nimport { SETUSER, LOGIN, LOGOUT, ADMINLOGIN, ADMINLOGOUT, ALLUSERS, UPDATEUSER } from './ActionType';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n};\r\n\r\nconst initialState = {\r\n    // users: {},\r\n    user: null,\r\n    token: '',\r\n    // profile:'',\r\n    allUsers: [],\r\n    admintoken: '',\r\n\r\n}\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case SETUSER:\r\n\r\n            return {\r\n\r\n                ...state,\r\n                users: action.users,\r\n\r\n            }\r\n        case LOGIN:\r\n            return {\r\n                ...state,\r\n                token: action.token,\r\n\r\n\r\n            }\r\n\r\n\r\n        case LOGOUT:\r\n            return {\r\n                ...state,\r\n                user: null,\r\n\r\n            }\r\n\r\n        case ALLUSERS:\r\n            return {\r\n                ...state,\r\n                allUsers: action.data\r\n            }\r\n\r\n        case UPDATEUSER:\r\n            const updatedUser = action.data\r\n            const updatedUsers = state.allUsers.map((user) => {\r\n                if (user.id === updatedUser.id) {\r\n                    return updatedUser\r\n                } else {\r\n                    return user\r\n                }\r\n            })\r\n            return {\r\n                ...state,\r\n                allUsers: updatedUsers\r\n            }\r\n\r\n        case ADMINLOGIN:\r\n            return {\r\n                ...state,\r\n                admintoken: action.token,\r\n\r\n\r\n            }\r\n        case ADMINLOGOUT:\r\n            return {\r\n                ...state,\r\n                admintoken:'',\r\n                allUsers:[],\r\n\r\n\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, reducer);\r\n\r\nconst store = createStore(persistedReducer);\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor };"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,YAAY,EAAEC,cAAc,QAAQ,eAAe;AAC5D,OAAOC,OAAO,MAAM,2BAA2B;AAE/C,SAASC,OAAO,EAAEC,KAAK,EAAEC,MAAM,EAAEC,UAAU,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,cAAc;AAEpG,MAAMC,aAAa,GAAG;EAClBC,GAAG,EAAE,MAAM;EACXT;AACJ,CAAC;AAED,MAAMU,YAAY,GAAG;EACjB;EACAC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,EAAE;EACT;EACAC,QAAQ,EAAE,EAAE;EACZC,UAAU,EAAE;AAEhB,CAAC;AAGD,MAAMC,OAAO,GAAGA,CAACC,KAAK,GAAGN,YAAY,EAAEO,MAAM,KAAK;EAE9C,QAAQA,MAAM,CAACC,IAAI;IAEf,KAAKjB,OAAO;MAER,OAAO;QAEH,GAAGe,KAAK;QACRG,KAAK,EAAEF,MAAM,CAACE;MAElB,CAAC;IACL,KAAKjB,KAAK;MACN,OAAO;QACH,GAAGc,KAAK;QACRJ,KAAK,EAAEK,MAAM,CAACL;MAGlB,CAAC;IAGL,KAAKT,MAAM;MACP,OAAO;QACH,GAAGa,KAAK;QACRL,IAAI,EAAE;MAEV,CAAC;IAEL,KAAKL,QAAQ;MACT,OAAO;QACH,GAAGU,KAAK;QACRH,QAAQ,EAAEI,MAAM,CAACG;MACrB,CAAC;IAEL,KAAKb,UAAU;MACX,MAAMc,WAAW,GAAGJ,MAAM,CAACG,IAAI;MAC/B,MAAME,YAAY,GAAGN,KAAK,CAACH,QAAQ,CAACU,GAAG,CAAEZ,IAAI,IAAK;QAC9C,IAAIA,IAAI,CAACa,EAAE,KAAKH,WAAW,CAACG,EAAE,EAAE;UAC5B,OAAOH,WAAW;QACtB,CAAC,MAAM;UACH,OAAOV,IAAI;QACf;MACJ,CAAC,CAAC;MACF,OAAO;QACH,GAAGK,KAAK;QACRH,QAAQ,EAAES;MACd,CAAC;IAEL,KAAKlB,UAAU;MACX,OAAO;QACH,GAAGY,KAAK;QACRF,UAAU,EAAEG,MAAM,CAACL;MAGvB,CAAC;IACL,KAAKP,WAAW;MACZ,OAAO;QACH,GAAGW,KAAK;QACRF,UAAU,EAAC,EAAE;QACbD,QAAQ,EAAC;MAGb,CAAC;IAEL;MACI,OAAOG,KAAK;EACpB;AACJ,CAAC;AAED,MAAMS,gBAAgB,GAAG1B,cAAc,CAACS,aAAa,EAAEO,OAAO,CAAC;AAE/D,MAAMW,KAAK,GAAG7B,WAAW,CAAC4B,gBAAgB,CAAC;AAC3C,MAAME,SAAS,GAAG7B,YAAY,CAAC4B,KAAK,CAAC;AAErC,SAASA,KAAK,EAAEC,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}